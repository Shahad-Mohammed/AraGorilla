"1. instruction: إدخل جملة باللغة العربية واستخدم خدمة استخراج الميزات المقدمة بواسطة ConvBERT للحصول على معلومات حول الجملة.\n   api: domain: Natural Language Processing Feature Extraction\n        framework: Hugging Face Transformers\n        functionality: Feature Extraction\n        api_name: YituTech/conv-bert-base\n        api_call: AutoModel.from_pretrained('YituTech/conv-bert-base')\n        api_arguments: N/A\n        python_environment_requirements: transformers\n        example_code: N/A\n        performance: dataset: N/A\n        accuracy: N/A\n        description: A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library.\n\n2. instruction: قم بإنشاء برنامج يستخدم ConvBERT لتحليل نصوص باللغة العربية واستخراج المعلومات الرئيسية منها.\n   api: domain: Natural Language Processing Feature Extraction\n        framework: Hugging Face Transformers\n        functionality: Feature Extraction\n        api_name: YituTech/conv-bert-base\n        api_call: AutoModel.from_pretrained('YituTech/conv-bert-base')\n        api_arguments: N/A\n        python_environment_requirements: transformers\n        example_code: N/A\n        performance: dataset: N/A\n        accuracy: N/A\n        description: A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library.\n\n3. instruction: تدرب نموذج تعلم آلي باستخدام ConvBERT لتصنيف النصوص في اللغة العربية.\n   api: domain: Natural Language Processing Feature Extraction\n        framework: Hugging Face Transformers\n        functionality: Feature Extraction\n        api_name: YituTech/conv-bert-base\n        api_call: AutoModel.from_pretrained('YituTech/conv-bert-base')\n        api_arguments: N/A\n        python_environment_requirements: transformers\n        example_code: N/A\n        performance: dataset: N/A\n        accuracy: N/A\n        description: A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library.\n\n4. instruction: استخدم ConvBERT لتحليل وتفسير نصوص أدبية باللغة العربية.\n   api: domain: Natural Language Processing Feature Extraction\n        framework: Hugging Face Transformers\n        functionality: Feature Extraction\n        api_name: YituTech/conv-bert-base\n        api_call: AutoModel.from_pretrained('YituTech/conv-bert-base')\n        api_arguments: N/A\n        python_environment_requirements: transformers\n        example_code: N/A\n        performance: dataset: N/A\n        accuracy: N/A\n        description: A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library.\n\n5. instruction: تجميع بيانات نصية باللغة العربية واستخدام ConvBERT لاستخراج سمات هامة من النصوص.\n   api: domain: Natural Language Processing Feature Extraction\n        framework: Hugging Face Transformers\n        functionality: Feature Extraction\n        api_name: YituTech/conv-bert-base\n        api_call: AutoModel.from_pretrained('YituTech/conv-bert-base')\n        api_arguments: N/A\n        python_environment_requirements: transformers\n        example_code: N/A\n        performance: dataset: N/A\n        accuracy: N/A\n        description: A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library.\n\n6. instruction: تحليل الإشارات النصية باستخدام ConvBERT لفهم معنى العبارات العربية.\n   api: domain: Natural Language Processing Feature Extraction\n        framework: Hugging Face Transformers\n        functionality: Feature Extraction\n        api_name: YituTech/conv-bert-base\n        api_call: AutoModel.from_pretrained('YituTech/conv-bert-base')\n        api_arguments: N/A\n        python_environment_requirements: transformers\n        example_code: N/A\n        performance: dataset: N/A\n        accuracy: N/A\n        description: A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library.\n\n7. instruction: تحليل نصوص التعليم الإلكتروني باستخدام ConvBERT لفهم محتوى المقالات التعليمية باللغة العربية.\n   api: domain: Natural Language Processing Feature Extraction\n        framework: Hugging Face Transformers\n        functionality: Feature Extraction\n        api_name: YituTech/conv-bert-base\n        api_call: AutoModel.from_pretrained('YituTech/conv-bert-base')\n        api_arguments: N/A\n        python_environment_requirements: transformers\n        example_code: N/A\n        performance: dataset: N/A\n        accuracy: N/A\n        description: A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library.\n\n8. instruction: استخدم ConvBERT لفحص المنشورات على وسائل التواصل الاجتماعي باللغة العربية لفهم مشاعر ومحتوى النصوص.\n   api: domain: Natural Language Processing Feature Extraction\n        framework: Hugging Face Transformers\n        functionality: Feature Extraction\n        api_name: YituTech/conv-bert-base\n        api_call: AutoModel.from_pretrained('YituTech/conv-bert-base')\n        api_arguments: N/A\n        python_environment_requirements: transformers\n        example_code: N/A\n        performance: dataset: N/A\n        accuracy: N/A\n        description: A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library.\n\n9. instruction: قم بتنفيذ دراسة لغوية باستخدام ConvBERT لتحليل بنية الجمل والعبارات باللغة العربية.\n   api: domain: Natural Language Processing Feature Extraction\n        framework: Hugging Face Transformers\n        functionality: Feature Extraction\n        api_name: YituTech/conv-bert-base\n        api_call: AutoModel.from_pretrained('YituTech/conv-bert-base')\n        api_arguments: N/A\n        python_environment_requirements: transformers\n        example_code: N/A\n        performance: dataset: N/A\n        accuracy: N/A\n        description: A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library.\n\n10. instruction: استخدم ConvBERT لتحليل النصوص الطبية باللغة العربية لاستخراج المعلومات الطبية الهامة.\n    api: domain: Natural Language Processing Feature Extraction\n         framework: Hugging Face Transformers\n         functionality: Feature Extraction\n         api_name: YituTech/conv-bert-base\n         api_call: AutoModel.from_pretrained('YituTech/conv-bert-base')\n         api_arguments: N/A\n         python_environment_requirements: transformers\n         example_code: N/A\n         performance: dataset: N/A\n         accuracy: N/A\n         description: A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library."
"1. instruction: نحن نرغب في تطوير تطبيق لمقارنة أحجام الأشياء المختلفة. هل يمكنك اقتراح API لاستخراج الميزات والبقاء على رأس المشكلة؟ api: domain: Computer Vision Object Detection framework: TensorFlow functionality: Feature Extraction api_name: ssd_mobilenet_v2_coco api_call: object_detection_feature_extraction() api_arguments: image_path, object_classes python_environment_requirements: TensorFlow, OpenCV example_code: result = object_detection_feature_extraction('image.jpg', ['car', 'person']) performance: dataset: COCO dataset accuracy: 0.67 description: An API for feature extraction using SSD MobileNet V2 on the COCO dataset.\n2. instruction: نريد تطوير تطبيق لتحليل الموسيقى وتحديد الألحان الموجودة في ملفات الصوت. هل يمكنك اقتراح API ملائم لهذا الغرض؟ api: domain: Audio Processing Music Analysis framework: Librosa functionality: Feature Extraction api_name: chroma_stft api_call: librosa.feature.chroma_stft() api_arguments: audio_path, sample_rate python_environment_requirements: Librosa, NumPy example_code: features = librosa.feature.chroma_stft(y, sr) performance: dataset: Custom music dataset accuracy: N/A description: An API for extracting chroma feature using Short-Time Fourier Transform for music analysis.\n3. instruction: بناء نظام لتصنيف الأسماء إلى فئات مختلفة باستخدام تقنيات تعلم الآلة. ما هي API الموصى بها لاستخراج الميزات اللازمة؟ api: domain: Machine Learning Name Classification framework: Scikit-learn functionality: Feature Extraction api_name: CountVectorizer api_call: CountVectorizer() api_arguments: text_data python_environment_requirements: Scikit-learn, Pandas example_code: vectorizer = CountVectorizer() X = vectorizer.fit_transform(text_data) performance: dataset: Name classification dataset accuracy: N/A description: An API for converting text data into a matrix of token counts.\n4. instruction: نريد إنشاء أداة توليد تلقائي لمحتوى الفيديوهات باستخدام تقنيات معالجة اللغة الطبيعية. هل يمكنك اقتراح API مناسبة للاستخدام؟ api: domain: Natural Language Processing Video Content Generation framework: OpenAI GPT-3 functionality: Text Generation api_name: openai-gpt3 api_call: generate_text() api_arguments: text_data python_environment_requirements: OpenAI GPT-3 example_code: generated_text = generate_text(text_data) performance: dataset: N/A accuracy: N/A description: An API for generating text using OpenAI's GPT-3 language model.\n5. instruction: نرغب في تطوير تطبيق للتعرف على الوجوه في الصور. هل يمكنك اقتراح API لاستخراج خصائص الوجوه؟ api: domain: Computer Vision Face Recognition framework: OpenCV functionality: Feature Extraction api_name: face_recognition api_call: extract_face_features() api_arguments: image_path python_environment_requirements: OpenCV, Dlib example_code: features = extract_face_features('image.jpg') performance: dataset: Labeled faces in the wild accuracy: 0.89 description: An API for extracting facial features using Dlib for face recognition.\n6. instruction: نود تطوير نظام لتحليل المشاهد في مقاطع الفيديو للكشف عن أنماط معينة. ما هي الAPI الأمثل لاستخراج الميزات اللازمة لهذا الهدف؟ api: domain: Computer Vision Video Scene Analysis framework: OpenCV functionality: Feature Extraction api_name: hog api_call: cv2.HOGDescriptor() api_arguments: video_path python_environment_requirements: OpenCV example_code: hog = cv2.HOGDescriptor() features = hog.compute(frame) performance: dataset: Custom video dataset accuracy: N/A description: An API for extracting Histogram of Oriented Gradients features for video scene analysis.\n7. instruction: نحتاج إلى تحويل النص إلى صوت باللغة العربية لتكامله في تطبيقنا. هل يمكنك اقتراح API مناسبة لهذا الغرض؟ api: domain: Text-to-Speech Arabic Speech Synthesis framework: Google Text-to-Speech functionality: Synthesize Speech api_name: google-text-to-speech api_call: synthesize_speech() api_arguments: text_data python_environment_requirements: Google Cloud SDK example_code: audio_data = synthesize_speech(text_data, language='ar') performance: dataset: N/A accuracy: N/A description: An API for generating speech from text in Arabic using Google's Text-to-Speech service.\n8. instruction: نرغب في تطوير أداة لتحليل العواطف في النصوص الإنجليزية. هل يمكنك اقتراح API لاستخراج الميزات اللازمة لذلك؟ api: domain: Natural Language Processing Sentiment Analysis framework: VADER SentimentIntensityAnalyzer functionality: Feature Extraction api_name: vader_sentiment api_call: SentimentIntensityAnalyzer() api_arguments: text_data python_environment_requirements: NLTK example_code: analyzer = SentimentIntensityAnalyzer() sentiment_scores = analyzer.polarity_scores(text_data) performance: dataset: English sentiment text dataset accuracy: N/A description: An API for extracting sentiment features using VADER sentiment analyzer for English text.\n9. instruction: نريد تحسين يدوية تشكيل النصوص العربية. هل يمكنك اقتراح API يمكن استخدامه لهذا الغرض؟ api: domain: Natural Language Processing Arabic Text Processing framework: Farasa functionality: Text Normalization api_name: farasa_text_processing api_call: normalize_text() api_arguments: arabic_text python_environment_requirements: Farasa-NLP example_code: processed_text = normalize_text(arabic_text) performance: dataset: N/A accuracy: N/A description: An API for normalizing Arabic text using the Farasa-NLP toolkit.\n10. instruction: لدينا تطبيق يتعامل مع بيانات زمنية تتطلب استخلاص سلسلة زمنية. هل يمكنك اقتراح API توفر هذه الوظيفة؟ api: domain: Time Series Analysis Time Series Extraction framework: Pandas functionality: Feature Extraction api_name: pandas_time_series api_call: pd.TimeSeries() api_arguments: time_data python_environment_requirements: Pandas, NumPy example_code: time_series_data = pd.TimeSeries(time_data) performance: dataset: N/A accuracy: N/A description: An API for handling time series data extraction using Pandas library."
"1. instruction: يجب على الباحثين تحليل مجموعة من التغريدات لفهم سلوك المستهلكين تجاه منتج معين. يمكن استخدام واجهة برمجة التطبيقات التالية لاستخراج الميزات اللازمة: api: domain: Natural Language Processing Feature Extraction framework: Hugging Face Transformers functionality: Feature Extraction api_name: YituTech/conv-bert-base api_call: AutoModel.from_pretrained('YituTech/conv-bert-base') api_arguments: N/A python_environment_requirements: transformers example_code: N/A performance: dataset: N/A accuracy: N/A description: A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library.\n\n2. instruction: تريد الشركة التحليلية استخدام نموذج محدد لتقدير المشاعر المختلفة المعبر عنها في سلسلة من المقالات الصحفية. يمكن استخدام واجهة برمجة التطبيقات التالية لأداء هذه المهمة: api: domain: Natural Language Processing Sentiment Analysis framework: Hugging Face Transformers functionality: Sentiment Analysis api_name: some-sentiment-analysis-model api_call: AutoModel.from_pretrained('some-sentiment-analysis-model') api_arguments: N/A python_environment_requirements: transformers example_code: N/A performance: dataset: N/A accuracy: N/A description: A pre-trained sentiment analysis model for analyzing sentiments in textual data.\n\n3. instruction: يطلب منك تحليل الصور الطبية لتحديد نوع معين من الأورام. يمكنك استخدام الأداة التالية لتوليد الميزات اللازمة من الصور: api: domain: Computer Vision Image Analysis framework: TensorFlow functionality: Feature Extraction api_name: some-image-analysis-tool api_call: model = some_image_analysis_tool() api_arguments: N/A python_environment_requirements: TensorFlow example_code: N/A performance: dataset: N/A accuracy: N/A description: A tool for extracting features from medical images to analyze and detect specific types of tumors.\n\n4. instruction: أريدك أن تساعدني في فحص النصوص القانونية للكشف عن أي معلومات حساسة. يمكن استخدام الواجهة البرمجية التالية لمساعدتك في هذه المهمة: api: domain: Natural Language Processing Information Extraction framework: spaCy functionality: Named Entity Recognition api_name: some-legal-ner-model api_call: nlp = some_legal_ner_model() api_arguments: N/A python_environment_requirements: spaCy example_code: N/A performance: dataset: N/A accuracy: N/A description: A Named Entity Recognition model specialized in extracting sensitive information from legal texts.\n\n5. instruction: لديك مجموعة كبيرة من البيانات النصية وترغب في تصنيفها إلى فئات مختلفة. يمكنك استخدام واجهة برمجة التطبيقات التالية لتحقيق ذلك: api: domain: Natural Language Processing Text Classification framework: Hugging Face Transformers functionality: Text Classification api_name: some-text-classification-model api_call: AutoModel.from_pretrained('some-text-classification-model') api_arguments: N/A python_environment_requirements: transformers example_code: N/A performance: dataset: N/A accuracy: N/A description: A pre-trained model for classifying textual data into different categories.\n\n6. instruction: تريد تحليل المشاهد في مقاطع الفيديو لاكتشاف أشكال معينة. يمكنك استخدام الأداة التالية لاستخراج الخصائص الفريدة من المشاهد: api: domain: Computer Vision Video Analysis framework: OpenCV functionality: Feature Extraction api_name: some-video-analysis-tool api_call: video_tool = some_video_analysis_tool() api_arguments: N/A python_environment_requirements: OpenCV example_code: N/A performance: dataset: N/A accuracy: N/A description: A tool for extracting unique features from video scenes to detect specific shapes.\n\n7. instruction: تحتاج إلى تحديد المواضع التي تظهر فيها وجوه الأشخاص على عدة صور فوتوغرافية. يمكنك استخدام الواجهة البرمجية التالية لتحقيق هذا الهدف: api: domain: Computer Vision Facial Recognition framework: OpenCV functionality: Facial Detection api_name: some-facial-recognition-tool api_call: face_detector = some_facial_recognition_tool() api_arguments: N/A python_environment_requirements: OpenCV example_code: N/A performance: dataset: N/A accuracy: N/A description: A tool for detecting and locating faces within multiple photographic images.\n\n8. instruction: ترغب في تقدير سن الأفراد من صورهم الشخصية. يمكنك استخدام الأداة التالية لاستخراج السن المقدرة من الصور: api: domain: Computer Vision Age Estimation framework: TensorFlow functionality: Age Estimation api_name: some-age-estimation-tool api_call: age_estimator = some_age_estimation_tool() api_arguments: N/A python_environment_requirements: TensorFlow example_code: N/A performance: dataset: N/A accuracy: N/A description: A tool for estimating the age of individuals from their personal images.\n\n9. instruction: أود تحويل سلسلة من التدوينات الصوتية إلى نصوص مكتوبة. يمكنك استخدام واجهة برمجة التطبيقات التالية لتنفيذ هذه المهمة: api: domain: Natural Language Processing Speech to Text Conversion framework: Google Cloud Speech-To-Text functionality: Speech-to-Text Conversion api_name: google-speech-to-text api_call: google_asr = google_speech_to_text() api_arguments: N/A python_environment_requirements: Google Cloud SDK example_code: N/A performance: dataset: N/A accuracy: N/A description: Google Cloud's Speech-to-Text API for converting spoken audio into written text.\n\n10. instruction: أريدك أن تساعدني في تحليل الرسائل الإلكترونية لفهم محتواها وتصنيفها وصنع تقييم لها. يمكنك استخدام الواجهة البرمجية التالية لأداء تحليل النصوص بدقة: api: domain: Natural Language Processing Text Analysis framework: spaCy functionality: Text Analysis api_name: some-text-analysis-tool api_call: text_analyzer = some_text_analysis_tool() api_arguments: N/A python_environment_requirements: spaCy example_code: N/A performance: dataset: N/A accuracy: N/A description: A text analysis tool utilizing spaCy for accurately analyzing and categorizing email messages."
"1. instruction: استخدم النموذج المدرب مسبقًا \"distilbert-base-arabic\" لتحليل محتوى النصوص العربية.\n   api: domain: Natural Language Processing Text Analysis\n   framework: Hugging Face Transformers\n   functionality: Text Analysis\n   api_name: distilbert-base-arabic\n   api_call: AutoModel.from_pretrained('aubmindlab/bert-base-arabert')\n   api_arguments: N/A\n   python_environment_requirements: transformers\n   example_code: N/A\n   performance: dataset: N/A\n   accuracy: N/A\n   description: A pre-trained DistilBERT model for text analysis in Arabic provided by AUB Mind Lab, based on the Hugging Face Transformers library.\n\n2. instruction: قم باستخدام النموذج \"Tashkeela/bert-base-arabic\" لتحويل النصوص العربية إلى نصوص مشكلة.\n   api: domain: Natural Language Processing Text Processing\n   framework: Hugging Face Transformers\n   functionality: Text Processing\n   api_name: Tashkeela/bert-base-arabic\n   api_call: AutoModel.from_pretrained('Tashkeela/bert-base-arabic')\n   api_arguments: N/A\n   python_environment_requirements: transformers\n   example_code: N/A\n   performance: dataset: N/A\n   accuracy: N/A\n   description: A pre-trained BERT model for adding diacritics to Arabic text provided by Tashkeela, based on the Hugging Face Transformers library.\n\n3. instruction: استخدم النموذج \"UBC-NLP/ARBERT\" لتصنيف التعليقات العربية إلى إيجابية وسلبية.\n   api: domain: Natural Language Processing Sentiment Analysis\n   framework: Hugging Face Transformers\n   functionality: Sentiment Analysis\n   api_name: UBC-NLP/ARBERT\n   api_call: AutoModel.from_pretrained('UBC-NLP/ARBERT')\n   api_arguments: N/A\n   python_environment_requirements: transformers\n   example_code: N/A\n   performance: dataset: N/A\n   accuracy: N/A\n   description: A pre-trained ARBERT model for sentiment analysis in Arabic comments provided by UBC-NLP, based on the Hugging Face Transformers library.\n\n4. instruction: استخدم نموذج \"CAMeL-Lab/bert-base-camel-sentiment-arabic\" لتحليل المشاعر في النصوص العربية.\n   api: domain: Natural Language Processing Sentiment Analysis\n   framework: Hugging Face Transformers\n   functionality: Sentiment Analysis\n   api_name: CAMeL-Lab/bert-base-camel-sentiment-arabic\n   api_call: AutoModel.from_pretrained('CAMeL-Lab/bert-base-camel-sentiment-arabic')\n   api_arguments: N/A\n   python_environment_requirements: transformers\n   example_code: N/A\n   performance: dataset: N/A\n   accuracy: N/A\n   description: A pre-trained BERT model for sentiment analysis in Arabic text provided by CAMeL Lab, based on the Hugging Face Transformers library.\n\n5. instruction: استخدم النموذج \"aubmindlab/Arabic-and-MSA-distilBERT-sentiment\" لتحليل مشاعر النصوص العربية والإنجليزية.\n   api: domain: Natural Language Processing Sentiment Analysis\n   framework: Hugging Face Transformers\n   functionality: Sentiment Analysis\n   api_name: aubmindlab/Arabic-and-MSA-distilBERT-sentiment\n   api_call: AutoModel.from_pretrained('aubmindlab/Arabic-and-MSA-distilBERT-sentiment')\n   api_arguments: N/A\n   python_environment_requirements: transformers\n   example_code: N/A\n   performance: dataset: N/A\n   accuracy: N/A\n   description: A pre-trained DistilBERT model for sentiment analysis in Arabic and English text provided by AUB Mind Lab, based on the Hugging Face Transformers library.\n\n6. instruction: قم باستخدام النموذج \"araevec/araelectra-base\" لتوقع المواقف أو الرؤى في النصوص العربية.\n   api: domain: Natural Language Processing Text Analysis\n   framework: Hugging Face Transformers\n   functionality: Text Analysis\n   api_name: araevec/araelectra-base\n   api_call: AutoModel.from_pretrained('araevec/araelectra-base')\n   api_arguments: N/A\n   python_environment_requirements: transformers\n   example_code: N/A\n   performance: dataset: N/A\n   accuracy: N/A\n   description: A pre-trained AraELECTRA model for stance or viewpoint prediction in Arabic text provided by AraEvec, based on the Hugging Face Transformers library.\n\n7. instruction: استخدم النموذج \"UBC-NLP/Arabic-CodeBERT\" لتحليل وتصنيف النصوص البرمجية باللغة العربية.\n   api: domain: Natural Language Processing Code Analysis\n   framework: Hugging Face Transformers\n   functionality: Code Analysis\n   api_name: UBC-NLP/Arabic-CodeBERT\n   api_call: AutoModel.from_pretrained('UBC-NLP/Arabic-CodeBERT')\n   api_arguments: N/A\n   python_environment_requirements: transformers\n   example_code: N/A\n   performance: dataset: N/A\n   accuracy: N/A\n   description: A pre-trained Arabic CodeBERT model for source code analysis and classification in Arabic provided by UBC-NLP, based on the Hugging Face Transformers library.\n\n8. instruction: إستخدم النموذج \"UBC-NLP/Arabic-CodeBERT\" لتحليل وتصنيف النصوص البرمجية باللغة العربية.\n   api: domain: Natural Language Processing Code Analysis\n   framework: Hugging Face Transformers\n   functionality: Code Analysis\n   api_name: UBC-NLP/Arabic-CodeBERT\n   api_call: AutoModel.from_pretrained('UBC-NLP/Arabic-CodeBERT')\n   api_arguments: N/A\n   python_environment_requirements: transformers\n   example_code: N/A\n   performance: dataset: N/A\n   accuracy: N/A\n   description: A pre-trained Arabic CodeBERT model for source code analysis and classification in Arabic provided by UBC-NLP, based on the Hugging Face Transformers library.\n\n9. instruction: قم بتحسين إنتاجية الكتابة باللغة العربية باستخدام النموذج \"asafaya/bert-base-arabic-qa\".\n   api: domain: Natural Language Processing Language Generation\n   framework: Hugging Face Transformers\n   functionality: Language Generation\n   api_name: asafaya/bert-base-arabic-qa\n   api_call: AutoModel.from_pretrained('asafaya/bert-base-arabic-qa')\n   api_arguments: N/A\n   python_environment_requirements: transformers\n   example_code: N/A\n   performance: dataset: N/A\n   accuracy: N/A\n   description: A pre-trained BERT model for Arabic language question answering provided by Asafaya, based on the Hugging Face Transformers library.\n\n10. instruction: قم بتعلم التعرف على الكلمات الرئيسية في النصوص العربية باستخدام النموذج \"asafaya/Arabic-BERT-MWE\".\n    api: domain: Natural Language Processing Keyword Extraction\n    framework: Hugging Face Transformers\n    functionality: Keyword Extraction\n    api_name: asafaya/Arabic-BERT-MWE\n    api_call: AutoModel.from_pretrained('asafaya/Arabic-BERT-MWE')\n    api_arguments: N/A\n    python_environment_requirements: transformers\n    example_code: N/A\n    performance: dataset: N/A\n    accuracy: N/A\n    description: A pre-trained Arabic BERT model for multi-word expression identification in Arabic text provided by Asafaya, based on the Hugging Face Transformers library."
