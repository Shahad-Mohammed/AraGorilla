{"domain": "Natural Language Processing Feature Extraction", "framework": "Hugging Face Transformers", "functionality": "Feature Extraction", "api_name": "YituTech/conv-bert-base", "api_call": "AutoModel.from_pretrained('YituTech/conv-bert-base')", "api_arguments": "N/A", "python_environment_requirements": "transformers", "example_code": "N/A", "performance": {"dataset": "N/A", "accuracy": "N/A"}, "description": "A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library."}
{"domain": "Natural Language Processing Text Generation", "framework": "Transformers", "functionality": "Text Generation", "api_name": "facebook/opt-1.3b", "api_call": "pipeline('text-generation', model='facebook/opt-1.3b')", "api_arguments": ["text"], "python_environment_requirements": ["transformers"], "example_code": "from transformers import pipeline\ngenerator = pipeline('text-generation', model='facebook/opt-1.3b')\ngenerator(Hello, I'm am conscious and)", "performance": {"dataset": "BookCorpus, CC-Stories, The Pile, Pushshift.io Reddit, CCNewsV2", "accuracy": "Not provided"}, "description": "OPT (Open Pre-trained Transformers) is a suite of decoder-only pre-trained transformers ranging from 125M to 175B parameters, trained to roughly match the performance and sizes of the GPT-3 class of models. It can be used for prompting for evaluation of downstream tasks as well as text generation."}
{"domain": "Computer Vision Image Classification", "framework": "Hugging Face Transformers", "functionality": "Feature Extraction", "api_name": "facebook/dino-vits8", "api_call": "ViTModel.from_pretrained('facebook/dino-vits8')", "api_arguments": ["images", "return_tensors"], "python_environment_requirements": ["transformers", "PIL", "requests"], "example_code": "from transformers import ViTFeatureExtractor, ViTModel\nfrom PIL import Image\nimport requests\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\nimage = Image.open(requests.get(url, stream=True).raw)\nfeature_extractor = ViTFeatureExtractor.from_pretrained('facebook/dino-vits8')\nmodel = ViTModel.from_pretrained('facebook/dino-vits8')\ninputs = feature_extractor(images=image, return_tensors=pt)\noutputs = model(**inputs)\nlast_hidden_states = outputs.last_hidden_state", "performance": {"dataset": "imagenet-1k", "accuracy": null}, "description": "Vision Transformer (ViT) model trained using the DINO method. It was introduced in the paper Emerging Properties in Self-Supervised Vision Transformers by Mathilde Caron, Hugo Touvron, Ishan Misra, Herv\u00e9 J\u00e9gou, Julien Mairal, Piotr Bojanowski, Armand Joulin and first released in this repository."}
{"domain": "Computer Vision Image Classification", "framework": "Hugging Face Transformers", "functionality": "Feature Extraction", "api_name": "facebook/dino-vitb16", "api_call": "ViTModel.from_pretrained('facebook/dino-vitb16')", "api_arguments": {"pretrained_model_name_or_path": "facebook/dino-vitb16"}, "python_environment_requirements": {"transformers": "latest", "PIL": "latest", "requests": "latest"}, "example_code": "from transformers import ViTFeatureExtractor, ViTModel\nfrom PIL import Image\nimport requests\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\nimage = Image.open(requests.get(url, stream=True).raw)\nfeature_extractor = ViTFeatureExtractor.from_pretrained('facebook/dino-vitb16')\nmodel = ViTModel.from_pretrained('facebook/dino-vitb16')\ninputs = feature_extractor(images=image, return_tensors=pt)\noutputs = model(**inputs)\nlast_hidden_states = outputs.last_hidden_state", "performance": {"dataset": "imagenet-1k", "accuracy": "Not provided"}, "description": "Vision Transformer (ViT) model trained using the DINO method. The model is pretrained on a large collection of images in a self-supervised fashion, namely ImageNet-1k, at a resolution of 224x224 pixels. Images are presented to the model as a sequence of fixed-size patches (resolution 16x16), which are linearly embedded. One also adds a [CLS] token to the beginning of a sequence to use it for classification tasks. One also adds absolute position embeddings before feeding the sequence to the layers of the Transformer encoder. Note that this model does not include any fine-tuned heads."}
{"domain": "Multimodal Feature Extraction", "framework": "Hugging Face Transformers", "functionality": "Feature Extraction", "api_name": "cambridgeltl/SapBERT-from-PubMedBERT-fulltext", "api_call": "AutoModel.from_pretrained('cambridgeltl/SapBERT-from-PubMedBERT-fulltext')", "api_arguments": "input_ids, attention_mask", "python_environment_requirements": "transformers", "example_code": "inputs = tokenizer('covid infection', return_tensors='pt'); outputs = model(**inputs); cls_embedding = outputs.last_hidden_state[:, 0, :]", "performance": {"dataset": "UMLS", "accuracy": "N/A"}, "description": "SapBERT is a pretraining scheme that self-aligns the representation space of biomedical entities. It is trained with UMLS 2020AA (English only) and uses microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract-fulltext as the base model. The input should be a string of biomedical entity names, and the [CLS] embedding of the last layer is regarded as the output."}
{"domain": "Audio Automatic Speech Recognition", "framework": "Hugging Face Transformers", "functionality": "Feature Extraction", "api_name": "microsoft/wavlm-large", "api_call": "Wav2Vec2Model.from_pretrained('microsoft/wavlm-large')", "api_arguments": "speech input", "python_environment_requirements": "transformers", "example_code": "To fine-tune the model for speech recognition, see the official speech recognition example. To fine-tune the model for speech classification, see the official audio classification example.", "performance": {"dataset": "SUPERB benchmark", "accuracy": "state-of-the-art performance"}, "description": "WavLM-Large is a large model pretrained on 16kHz sampled speech audio. It is built based on the HuBERT framework, with an emphasis on both spoken content modeling and speaker identity preservation. WavLM is pretrained on 60,000 hours of Libri-Light, 10,000 hours of GigaSpeech, and 24,000 hours of VoxPopuli. It achieves state-of-the-art performance on the SUPERB benchmark and brings significant improvements for various speech processing tasks on their representative benchmarks."}
{"domain": "Reinforcement Learning", "framework": "ML-Agents", "functionality": "SoccerTwos", "api_name": "Raiden-1001/poca-Soccerv7", "api_call": "mlagents-load-from-hf --repo-id='Raiden-1001/poca-Soccerv7.1' --local-dir='./downloads'", "api_arguments": ["your_configuration_file_path.yaml", "run_id"], "python_environment_requirements": ["unity-ml-agents", "deep-reinforcement-learning", "ML-Agents-SoccerTwos"], "example_code": "Step 1: Write your model_id: Raiden-1001/poca-Soccerv7\nStep 2: Select your .nn /.onnx file\nClick on Watch the agent play \ud83d\udc40", "performance": {"dataset": "SoccerTwos", "accuracy": "Not provided"}, "description": "This is a trained model of a poca agent playing SoccerTwos using the Unity ML-Agents Library."}
{"domain": "Reinforcement Learning", "framework": "Unity ML-Agents Library", "functionality": "Train and play SoccerTwos", "api_name": "poca-SoccerTwosv2", "api_call": "mlagents-load-from-hf --repo-id='Raiden-1001/poca-SoccerTwosv2' --local-dir='./downloads'", "api_arguments": ["your_configuration_file_path.yaml", "run_id"], "python_environment_requirements": ["ml-agents"], "example_code": "mlagents-learn <your_configuration_file_path.yaml> --run-id=<run_id> --resume", "performance": {"dataset": "SoccerTwos", "accuracy": "Not provided"}, "description": "A trained model of a poca agent playing SoccerTwos using the Unity ML-Agents Library."}
{"domain": "Audio Audio-to-Audio", "framework": "Hugging Face Transformers", "functionality": "Asteroid", "api_name": "JorisCos/DPTNet_Libri1Mix_enhsingle_16k", "api_call": "pipeline('audio-to-audio', model='JorisCos/DPTNet_Libri1Mix_enhsingle_16k')", "api_arguments": {"model": "JorisCos/DPTNet_Libri1Mix_enhsingle_16k"}, "python_environment_requirements": ["transformers", "asteroid"], "example_code": "", "performance": {"dataset": "Libri1Mix", "si_sdr": 14.829670037349064, "si_sdr_imp": 11.379888731489366, "sdr": 15.395712644737149, "sdr_imp": 11.893049845524112, "sir": "Infinity", "sir_imp": "NaN", "sar": 15.395712644737149, "sar_imp": 11.893049845524112, "stoi": 0.9301948391058859, "stoi_imp": 0.13427501556534832}, "description": "This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the enh_single task of the Libri1Mix dataset."}
{"domain": "Tabular Tabular Classification", "framework": "Joblib", "functionality": "Carbon Emissions", "api_name": "jwan2021/autotrain-jwan-autotrain1-1768961489", "api_call": "joblib.load('model.joblib')", "api_arguments": ["data"], "python_environment_requirements": ["json", "joblib", "pandas"], "example_code": "import json\nimport joblib\nimport pandas as pd\nmodel = joblib.load('model.joblib')\nconfig = json.load(open('config.json'))\nfeatures = config['features']\ndata = pd.read_csv('data.csv')\ndata = data[features]\ndata.columns = ['feat_' + str(col) for col in data.columns]\npredictions = model.predict(data)", "performance": {"dataset": "Validation Metrics", "accuracy": 0.983}, "description": "Binary Classification model for Carbon Emissions prediction"}
{"domain": "Natural Language Processing Summarization", "framework": "Hugging Face Transformers", "functionality": "Text Summarization", "api_name": "facebook/bart-large-cnn", "api_call": "pipeline('summarization')", "api_arguments": ["ARTICLE", "max_length", "min_length", "do_sample"], "python_environment_requirements": ["transformers"], "example_code": "from transformers import pipeline\nsummarizer = pipeline(summarization, model=facebook/bart-large-cnn)\nARTICLE = ...\nprint(summarizer(ARTICLE, max_length=130, min_length=30, do_sample=False))", "performance": {"dataset": "cnn_dailymail", "accuracy": {"ROUGE-1": 42.949, "ROUGE-2": 20.815, "ROUGE-L": 30.619, "ROUGE-LSUM": 40.038}}, "description": "BART (large-sized model), fine-tuned on CNN Daily Mail. BART is a transformer encoder-encoder (seq2seq) model with a bidirectional (BERT-like) encoder and an autoregressive (GPT-like) decoder. BART is pre-trained by (1) corrupting text with an arbitrary noising function, and (2) learning a model to reconstruct the original text. BART is particularly effective when fine-tuned for text generation (e.g. summarization, translation) but also works well for comprehension tasks (e.g. text classification, question answering). This particular checkpoint has been fine-tuned on CNN Daily Mail, a large collection of text-summary pairs."}
{"domain": "Natural Language Processing Table Question Answering", "framework": "Transformers", "functionality": "Table Question Answering", "api_name": "google/tapas-large-finetuned-wtq", "api_call": "pipeline('table-question-answering')", "api_arguments": {"model": "google/tapas-large-finetuned-wtq", "task": "table-question-answering"}, "python_environment_requirements": "transformers", "example_code": "from transformers import pipeline\n\nqa_pipeline = pipeline('table-question-answering', model='google/tapas-large-finetuned-wtq')\n\nresult = qa_pipeline(table=table, query=query)", "performance": {"dataset": "wikitablequestions", "accuracy": 0.5097}, "description": "TAPAS large model fine-tuned on WikiTable Questions (WTQ). This model was pre-trained on MLM and an additional step which the authors call intermediate pre-training, and then fine-tuned in a chain on SQA, WikiSQL and finally WTQ. It uses relative position embeddings (i.e. resetting the position index at every cell of the table)."}
{"domain": "Natural Language Processing Text2Text Generation", "framework": "Transformers", "functionality": "Text Generation", "api_name": "google/t5-v1_1-base", "api_call": "pipeline('text2text-generation')", "api_arguments": {"model": "google/t5-v1_1-base"}, "python_environment_requirements": {"transformers": ">=4.0.0"}, "example_code": "from transformers import pipeline\n\nt5 = pipeline('text2text-generation', model='google/t5-v1_1-base')\nt5('translate English to French: Hugging Face is a great company')", "performance": {"dataset": "c4", "accuracy": "Not provided"}, "description": "Google's T5 Version 1.1 is a state-of-the-art text-to-text transformer model that achieves high performance on various NLP tasks such as summarization, question answering, and text classification. It is pre-trained on the Colossal Clean Crawled Corpus (C4) and fine-tuned on downstream tasks."}
{"domain": "Natural Language Processing Token Classification", "framework": "Hugging Face Transformers", "functionality": "Transformers", "api_name": "kredor/punctuate-all", "api_call": "pipeline('token-classification')", "api_arguments": [], "python_environment_requirements": ["transformers"], "example_code": "", "performance": {"dataset": "multilingual", "accuracy": 0.98}, "description": "A finetuned xlm-roberta-base model for punctuation prediction on twelve languages: English, German, French, Spanish, Bulgarian, Italian, Polish, Dutch, Czech, Portugese, Slovak, Slovenian."}
{"domain": "Multimodal Visual Question Answering", "framework": "Hugging Face Transformers", "functionality": "Transformers", "api_name": "microsoft/git-base-vqav2", "api_call": "pipeline('visual-question-answering')", "api_arguments": "image, question", "python_environment_requirements": ["transformers"], "example_code": "vqa(image='path/to/image.jpg', question='What is in the image?')", "performance": {"dataset": "VQAv2", "accuracy": "Refer to the paper for evaluation results"}, "description": "GIT (short for GenerativeImage2Text) model, base-sized version, fine-tuned on VQAv2. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository."}
